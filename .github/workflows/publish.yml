name: Publish to NPM

on:
  push:
    branches: [ main ]
    paths: [ 'index.ts' ]
  workflow_dispatch:     

permissions:
  id-token: write      # Required for OIDC
  contents: write      # Keep this for git operations

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'

    - name: Update npm
      run: npm install -g npm@latest

    - name: Install TypeScript
      run: npm install -g typescript

    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Check if this is the first publish
      id: check-first
      run: |
        if [ ! -f package.json ]; then
          echo "first-publish=true" >> $GITHUB_OUTPUT
          echo "This appears to be the first publish (no package.json)"
        else
          echo "first-publish=false" >> $GITHUB_OUTPUT
          echo "package.json exists, checking for changes"
        fi

    - name: Check for actual type changes
      id: check-changes
      if: steps.check-first.outputs.first-publish == 'false'
      run: |
        # Compare current index.ts with previous commit
        if git show HEAD~1:index.ts > previous.ts 2>/dev/null; then
          if diff -q index.ts previous.ts > /dev/null; then
            echo "No actual changes to types content"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "Types content has changed"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "Previous version not found, treating as new"
          echo "should-publish=true" >> $GITHUB_OUTPUT
        fi

    - name: Determine version bump type
      id: version-bump
      if: steps.check-first.outputs.first-publish == 'true' || steps.check-changes.outputs.should-publish == 'true'
      run: |
        # For now, default to patch 
        echo "bump=patch" >> $GITHUB_OUTPUT
        echo "Using patch version bump"

    - name: Build dual packages
      if: steps.check-first.outputs.first-publish == 'true' || steps.check-changes.outputs.should-publish == 'true'
      run: |
        echo "Building CommonJS and ES6 modules..."
        
        # Create dist directory
        mkdir -p dist
        
        # Build CommonJS version
        echo "Building CommonJS..."
        tsc --module commonjs --target es2020 --outDir dist/cjs --declaration true index.ts
        mv dist/cjs/index.js dist/index.cjs
        
        # Build ES6 version
        echo "Building ES6..."
        tsc --module es2020 --target es2020 --outDir dist/esm --declaration true index.ts
        mv dist/esm/index.js dist/index.mjs
        
        # Copy types from either build (they're the same)
        cp dist/cjs/index.d.ts dist/index.d.ts
        
        # Clean up temp directories
        rm -rf dist/cjs dist/esm
        
        # Verify builds
        echo "Build verification:"
        ls -la dist/
        echo "CommonJS sample:"
        head -5 dist/index.cjs
        echo "ES6 sample:"
        head -5 dist/index.mjs

    - name: Bump version and publish
      if: steps.check-first.outputs.first-publish == 'true' || steps.check-changes.outputs.should-publish == 'true'
      id: bump-version
      run: |
        if [ "${{ steps.check-first.outputs.first-publish }}" == "true" ]; then
          echo "First publish - version will be 1.0.0"
          NEW_VERSION="1.0.0"
        else
          # Bump version
          npm version ${{ steps.version-bump.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Bumped to version $NEW_VERSION"
          
          # Commit the version change
          git add package.json
          git commit -m "Bump version to $NEW_VERSION"
          git tag "v$NEW_VERSION"
        fi
        
        # Output the new version for later steps
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
        # Publish to NPM using OIDC (no token needed)
        npm publish --provenance --access public
        
        # Push the commit and tag (if not first publish)
        if [ "${{ steps.check-first.outputs.first-publish }}" == "false" ]; then
          git push origin main --tags
        fi
      # Remove the NODE_AUTH_TOKEN env var - no longer needed with OIDC

    - name: Create GitHub release
      if: steps.check-first.outputs.first-publish == 'true' || steps.check-changes.outputs.should-publish == 'true'
      run: |
        gh release create "v${{ steps.bump-version.outputs.new-version }}" \
          --title "v${{ steps.bump-version.outputs.new-version }}" \
          --notes "Automated release of ScoreboardMax API types

        Generated from API repository changes.
        
        üì¶ Dual package support:
        - CommonJS: \`require('@scoreboardmax/api-types')\`
        - ES6: \`import {} from '@scoreboardmax/api-types'\`"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        if [ "${{ steps.check-first.outputs.first-publish }}" == "true" ] || [ "${{ steps.check-changes.outputs.should-publish }}" == "true" ]; then
          echo "‚úÖ Successfully published @scoreboardmax/api-types to NPM with dual builds"
          echo "üì¶ Package now supports both CommonJS and ES6 modules"
          echo "üìã Published with provenance for enhanced security"
          echo "Install with: npm install @scoreboardmax/api-types"
        else
          echo "‚ÑπÔ∏è No changes detected, skipping publish"
        fi
